/**
 * comboMenu控件
 * 
 * @author yinjiabin
 */
(function($) {

	function init($target) {

		var options = $target.data('comboMenu').options;
		var data = processData(options.data, options.hasAllData);
		var $popArr = new Array();

		createCombo();
		createPop0();
		createOtherPops();
		if (options.addParentAndLevel) {
			addParentAndLevel(data, null, 0);
		}
		$target.data("comboMenuData", data);
		$target.data("popArr", $popArr);
		changeValue($target, findSelectedValue(data, ""));

		/**
		 * 创建combo
		 */
		function createCombo() {

			$target.addClass("comboMenu in");

			var $prefix = $('<span class="prefix"></span>');
			var $cmbTxt = $('<a href="javascript:void(0);" class="comboMenu_text"></a>');
			var $arrowIn = $('<span class="arrow in" style=""></span>');

			$target.append($prefix).append($cmbTxt).append($arrowIn);

			$target.height(options.height);
			$target.width(options.width);

			$prefix.css("padding-top", (options.height - 21) / 2);
			$cmbTxt.css("padding-top", (options.height - 21) / 2);

			if (options.title && options.title.length > 0) {
				$prefix.append(options.title + ": ");
			}

			$cmbTxt.width($target.width() - $prefix.width() - 31);
			// 因为$cmbTxt的padding-top 和 padding-left的和为6
			$cmbTxt.height(options.height - 6);

			$arrowIn.css("margin-top", (options.height - 25) / 2);

			$cmbTxt.bind("click", function() {
				comboClick($target);
			});
			$arrowIn.bind("click", function() {
				comboClick($target);
			});
		}

		/**
		 * 创建pop0
		 */
		function createPop0() {

			var $pop0 = $('<div class="popup popup_0" index="0" style="display: none;"></div></div>');

			$popArr.push($pop0);

			$pop0.width(options.width + 2);
			$pop0.css("top", options.height);

			$target.append($pop0);

			var $searchDiv = $('<div class="comboMenu_search"><span class="prefix">搜索:</span><input type="text" log="search_cate"><span class="cf"></span></div><div class="search-bottom"></div><div class="popup_wrap"></div>');
			$pop0.append($searchDiv);

			var $search = $pop0.find("[log=search_cate]");
			$search.bind("input protertychange", function(e) {
				searchChanged(e, $target);
			});
			$search.width(options.width - 68);

			if (options.useSearch == false) {
				$searchDiv.each(function() {
					$(this).hide();
				});
			}

			$pop0.append('<div class="popuplist"></div>');
		}

		/**
		 * 创建pop1-pop4
		 */
		function createOtherPops() {

			if (!options.popWidth) {
				options.popWidth = options.width;
			}
			var showTop = options.height;

			if (options.useSearch) {
				showTop = showTop + 34;
			}

			var $pop1 = $('<div class="popup popup_1" index="1" style="display: none;"><div class="popuplist" style="height: auto;"></div></div>');
			var $pop2 = $('<div class="popup popup_2" index="2" style="display: none;"><div class="popuplist" style="height: auto;"></div></div>');
			var $pop3 = $('<div class="popup popup_3" index="3" style="display: none;"><div class="popuplist" style="height: auto;"></div></div>');
			var $pop4 = $('<div class="popup popup_4" index="4" style="display: none;"><div class="popuplist" style="height: auto;"></div></div>');

			$popArr.push($pop1);
			$popArr.push($pop2);
			$popArr.push($pop3);
			$popArr.push($pop4);

			$target.append($pop1);
			$target.append($pop2);
			$target.append($pop3);
			$target.append($pop4);

			$pop1.css("left", options.width);
			$pop1.css("_margin-left", options.width); // 兼容IE6
			$pop1.css("width", options.popWidth);
			$pop1.css("top", showTop);

			$pop2.css("left", options.width + options.popWidth - 1);
			$pop2.css("_margin-left", options.width + options.popWidth - 1); // 兼容IE6
			$pop2.css("width", options.popWidth);
			$pop2.css("top", showTop);

			$pop3.css("left", options.width + options.popWidth + options.popWidth - 2);
			$pop3.css("_margin-left", options.width + options.popWidth + options.popWidth - 2); // 兼容IE6
			$pop3.css("width", options.popWidth);
			$pop3.css("top", showTop);

			$pop4.css("left", options.width + options.popWidth + options.popWidth + options.popWidth - 3);
			$pop4.css("_margin-left", options.width + options.popWidth + options.popWidth + options.popWidth - 3); // 兼容IE6
			$pop4.css("width", options.popWidth);
			$pop4.css("top", showTop);
		}
	}

	/**
	 * 点击combo的事件，需要弹出pop0
	 */
	function comboClick($target) {

		var options = $target.data('comboMenu').options;

		// 如果是只读状态，不响应点击事件
		if (options.readOnly) {
			return;
		}

		var $popArr = $target.data("popArr");

		if ($popArr[0].css("display") == "none") {
			$popArr[0].find("[log=search_cate]").val("");
			if (options.onShow) {
				var result = options.onShow();
				if (result == false) {
					return;
				}
			}

			var data = $target.data("comboMenuData");

			addMenuItem($target, $popArr[0].find(".popuplist"), data);
			if (!options.multiple) {
				getSelectedValueSingle($target, 0);
			}
			$popArr[0].show();

			$(document).unbind("click", comboMenuOuterClick);
			$(document).bind("click", comboMenuOuterClick);

		} else {
			$popArr[0].find("[log=search_cate]").val("");
			hideSubPopFrom($target, 0);
		}
		if (options.onClick) {
			options.onClick();
		}
	}

	/**
	 * 检索事件
	 */
	function searchChanged(e, $target) {

		var data = $target.data("comboMenuData");
		var options = $target.data('comboMenu').options;

		if (!data) {
			return;
		}
		var newValue = e.target.value;
		var $popArr = $target.data("popArr");
		var $popuplist = $popArr[0].find(".popuplist");
		if (newValue && newValue != "") {
			var findList = new Array();
			hideSubPopFrom($target, 1);
			findSearchList(e.target.value, data, findList);
			$popuplist.empty();
			addMenuItem($target, $popuplist, findList, true);
		} else {
			$popuplist.empty();
			addMenuItem($target, $popuplist, data);
		}
		if (!options.multiple) {
			getSelectedValueSingle($target, 0);
		}
	}

	/**
	 * 查找符合条件的数据
	 */
	function findSearchList(val, levData, findList) {

		for (var i = 0; i < levData.length; i++) {

			var tmpData = levData[i];
			if (tmpData.text && tmpData.text.replace(/ /g, "").toLowerCase().indexOf(val.replace(/ /g, "").toLowerCase()) >= 0) {
				findList.push(tmpData);
			}

			if (tmpData.children && tmpData.children.length > 0) {
				findSearchList(val, tmpData.children, findList);
			}
		}
	}

	/**
	 * 给popuplist添加数据。
	 */
	function addMenuItem($target, $popuplist, dataList, isUserParent) {

		var options = $target.data('comboMenu').options;
		var $popArr = $target.data("popArr");

		if (!dataList) {
			return;
		}

		for (var i = 0; i < dataList.length; i++) {

			var $menuItem = $('<a href="javascript:void(0);" class="comboItem"></a>');
			var itemData = dataList[i];
			if (itemData.children && itemData.children.length > 0) {
				$menuItem.addClass("hasLeaf");
			}
			if (isUserParent) {
				$menuItem.append(getDataString(itemData, options.joinStr));
			} else {
				$menuItem.append(itemData.text);
			}

			if (options.multiple) {
				$menuItem.addClass(getItemClass(itemData));
			}

			$menuItem.data("itemData", itemData);
			$menuItem.attr("keyValue", itemData.value);

			// 绑定click事件
			$menuItem.bind('click', function() {
				menuItemClick($target, $(this));
			});

			// 绑定mouseover事件
			$menuItem.bind('mouseover', function() {
				var $item = $(this);
				var itemData = $item.data("itemData");

				var level = parseInt($item.parents(".popup").attr("index")) + 1;

				hideSubPopFrom($target, level);

				if (itemData.children && itemData.children.length > 0) {

					addMenuItem($target, $popArr[level].find(".popuplist"), itemData.children);

					if (!options.multiple) {
						getSelectedValueSingle($target, level);
					}
					$popArr[level].show();
				}
			});

			$popuplist.append($menuItem);
		}
	}

	/**
	 * 条目点击事件
	 */
	function menuItemClick($target, $item) {

		var options = $target.data('comboMenu').options;
		var $popArr = $target.data("popArr");
		var itemData = $item.data("itemData");

		// 单选处理
		if (!options.multiple) {
			// 如果只能选择末级叶子节点，那么如果条目有子节点，则不响应点击事件
			if (!options.allLeafCanSelect && itemData.children && itemData.children.length > 0) {
				return;
			}
			changeValue($target, itemData);
			hideSubPopFrom($target, 0);
		}
		// 多选处理
		else {

			var $allDataItem = $popArr[0].find("[keyValue='']");
			var allDataItemData = $target.data("comboMenuData")[0];

			// 多选时，只能选择最末级叶子节点
			if (itemData.children && itemData.children.length > 0) {
				var childLevel = itemData.level + 1;
				var childrenItem = $popArr[childLevel].find(".comboItem");
				if ($item.hasClass("current")) {
					$item.removeClass("current");
					childrenItem.removeClass("current parentCurrent");
					selectItemDataAndChildren(itemData, 0);
				} else if ($item.hasClass("parentCurrent")) {
					// 如果是搜索状态，可以没有“全部数据”
					if ($allDataItem) {
						$allDataItem.removeClass("current");
					}
					allDataItemData.selected = 0;
					$item.removeClass("parentCurrent");
					childrenItem.removeClass("parentCurrent");
					$item.addClass("current");
					childrenItem.addClass("current");
					selectItemDataAndChildren(itemData, 1);
				} else { // 如果是搜索状态，可以没有“全部数据”
					if ($allDataItem) {
						$allDataItem.removeClass("current");
					}
					allDataItemData.selected = 0;
					$item.addClass("current");
					childrenItem.addClass("current");
					selectItemDataAndChildren(itemData, 1);
				}
			} else {
				// itemData如果是全部数据
				if (itemData.value == "") {
					if ($allDataItem.hasClass("current")) {
						return;
					} else {
						$popArr[0].find("[keyValue!='']").removeClass("current parentCurrent");
						// 如果是搜索状态，可以没有“全部数据”
						if ($allDataItem) {
							$allDataItem.addClass("current");
						}
						clearSelectedStates($target.data("comboMenuData"));
						itemData.selected = 1;
					}
				} else if ($item.hasClass("current")) {
					$item.removeClass("current");
					selectItemDataAndChildren(itemData, 0);
				} else {
					// 如果是搜索状态，可以没有“全部数据”
					if ($allDataItem) {
						$allDataItem.removeClass("current");
					}
					allDataItemData.selected = 0;
					$item.addClass("current");
					selectItemDataAndChildren(itemData, 1);
				}
			}

			var itemParent = null;

			for (var i = itemData.level - 1; i >= 0; i--) {
				if (!itemParent) {
					itemParent = itemData.parent;
				} else {
					itemParent = itemParent.parent;
				}

				var parentClass = getItemClass(itemParent);

				$popArr[i].find("[keyValue='" + itemParent.value + "']").removeClass("current parentCurrent").addClass(parentClass);
			}

			var oldValue = $target.data("selectedValue");
			var newValue = getMutipleSelectedValue($target);

			if (!newValue || newValue.length == 0) {
				newValue = [ allDataItemData ];
				allDataItemData.selected = 1;
				// 如果是搜索状态，可以没有“全部数据”
				if ($allDataItem) {
					$allDataItem.addClass("current");
				}
			}

			if (options.onChanged) {
				options.onChanged(oldValue, newValue);
			}
			showMutipleText($target, options, newValue);
			$target.data("selectedValue", newValue);
		}
	}

	/**
	 * 选择全部数据时，清除所有数据的选择状态
	 */
	function clearSelectedStates(itemDatas) {
		if (itemDatas) {
			for (var i = 0; i < itemDatas.length; i++) {
				itemDatas[i].selected = 0;
				clearSelectedStates(itemDatas[i].children);
			}
		}
	}

	/**
	 * 选择/取消选择 条目及其子条目
	 */
	function selectItemDataAndChildren(itemData, selected) {
		itemData.selected = selected;
		if (itemData.children) {
			for (var i = 0; i < itemData.children.length; i++) {
				selectItemDataAndChildren(itemData.children[i], selected);
			}
		}
	}

	/**
	 * 根据子节点来判断当前节点的样式
	 */
	function getItemClass(parentItemData) {

		parentItemData.selected = getMultipleStateByChildren(parentItemData);

		if (parentItemData.selected == 2) {
			return "parentCurrent";
		} else if (parentItemData.selected == 1) {
			return "current";
		}
		return "";
	}

	/**
	 * 处理多选状态
	 */
	function processMultipleStates(comboItemData) {

		if (comboItemData.children && comboItemData.children.length > 0) {
			for (var i = 0; i < comboItemData.children.length; i++) {
				processMultipleStates(comboItemData.children[i]);
			}
			comboItemData.selected = getMultipleStateByChildren(comboItemData);
		}
	}

	/**
	 * 根据子节点来判断当前节点的选择状态
	 */
	function getMultipleStateByChildren(parentItemData) {

		var selectedFlg = false;
		var unSelectedFlg = false;
		var halfSelectedFlg = false;
		var child = null;

		if (!parentItemData) {
			return 0;
		}

		if (!parentItemData.children || parentItemData.children.length == 0) {
			return parentItemData.selected;
		}

		for (var i = 0; i < parentItemData.children.length; i++) {
			child = parentItemData.children[i];
			if (child.selected == 1) {
				selectedFlg = true;
			} else if (child.selected == 2) {
				halfSelectedFlg = true;
			} else {
				unSelectedFlg = true;
			}

			// 如果子节点有一个半选，或者既有全选又有全不选的，则父为半选
			if (halfSelectedFlg || (selectedFlg && unSelectedFlg)) {
				return 2;
			}
		}

		if (selectedFlg) {
			return 1;
		}

		return 0;
	}

	/**
	 * 给参数data加上parent，以便于在查找的时候，能够找到parent，以显示出text的路径。
	 * 给参数data加上level，以便在处理的时候知道先把的条目的级别。
	 * 
	 * @author yinjiabin
	 */
	function addParentAndLevel(curDataArr, parent, level) {

		if (!curDataArr) {
			return;
		}

		for (var i = 0; i < curDataArr.length; i++) {
			var tmpData = curDataArr[i];
			tmpData.parent = parent;
			tmpData.level = level;
			tmpData.selected = 0;
			if (tmpData.children && tmpData.children.length > 0) {
				addParentAndLevel(tmpData.children, tmpData, level + 1);
			}
		}
	}

	/**
	 * 从level级开始隐藏pop。level后的pop都会被隐藏
	 */
	function hideSubPopFrom($target, level) {

		var options = $target.data('comboMenu').options;
		var $popArr = $target.data("popArr");
		var i = 0;

		if (level == 0 && options.onHide) {
			options.onHide();
		}

		for (i = level; i < $popArr.length; i++) {
			hideSubPop($popArr[i]);
		}
	}

	/**
	 * 多选的时候，显示text的值
	 */
	function showMutipleText($target, options, values) {

		var showText = new Array();

		for (i = 0; i < values.length; i++) {
			if (options.showSingleLevel == false) {
				showText.push(getDataString(values[i], options.joinStr));
			} else {
				showText.push(!values[i] ? "" : values[i].text);
			}
		}
		var text = showText.join(",");
		$target.find(".comboMenu_text").html(text);
		$target.attr("title", text);
	}

	/**
	 * 隐藏pop
	 */
	function hideSubPop($pop) {
		var $list = $pop.find(".popuplist");
		$pop.hide();
		$list.empty();
	}

	/**
	 * 取多选的选择值
	 */
	function getMutipleSelectedValue($target) {

		var selectedValue = new Array();
		var comboMenuData = $target.data("comboMenuData");

		addSelectedDataMutiple(selectedValue, comboMenuData);

		return selectedValue;
	}

	/**
	 * 添加多选的数据到selectedValue
	 */
	function addSelectedDataMutiple(selectedValue, itemDatas) {

		if (!itemDatas) {
			return;
		}

		for (var i = 0; i < itemDatas.length; i++) {
			if ((!itemDatas[i].children || itemDatas[i].children.length == 0) && itemDatas[i].selected == 1) {
				selectedValue.push(itemDatas[i]);
			} else {
				addSelectedDataMutiple(selectedValue, itemDatas[i].children);
			}
		}
	}

	/**
	 * 根据当前的选择值，选中级别为level的pop中的item条目，以加上class（单选的时候使用）
	 */
	function getSelectedValueSingle($target, level) {

		var $popArr = $target.data("popArr");
		var curValue = $target.data("selectedValue");
		var isSearch = $popArr[0].find("[log=search_cate]").val() != "";
		var i = 0;

		if (!curValue) {
			return;
		}

		$popArr[level].find(".current").removeClass("current");
		for (i = level; i <= curValue.level; i++) {
			var resultVal = findValueByLevel(curValue, i);
			if (!resultVal) {
				return;
			}
			$popArr[level].find("[keyValue='" + resultVal.value + "']").addClass("current");
			if (!isSearch) {
				break;
			}
		}
	}

	/**
	 * 根据当前的选择值，选中级别为level的pop中的item条目，以加上class（多选的时候使用）
	 */
	function getSelectedValueMultiple(itemDatas, level) {

		var $popArr = $target.data("popArr");

		$popArr[level].find(".current").removeClass("current parentCurrent");
		for (i = 0; i <= itemDatas.length; i++) {
			var resultVal = itemDatas[i];
			var parentClass = getItemClass(resultVal);
			$popArr[level].find("[keyValue='" + resultVal.value + "']").addClass(parentClass);
		}
	}

	/**
	 * 根据级别，找到包括一个json对象的父对象的值。在下拉点开时，以找到当前选择值的父节点值时使用。
	 */
	function findValueByLevel(curValue, level) {

		var resultVal = null;

		if (!curValue) {
			return null;
		}
		if (curValue.level > level) {
			resultVal = findValueByLevel(curValue.parent, level);
			if (resultVal) {
				return resultVal;
			}
		} else if (curValue.level == level) {
			return curValue;
		} else {
			return null;
		}
	}

	/**
	 * 在json数组中找到当前值的json对象
	 */
	function findSelectedValue(dataArr, value) {

		if (!dataArr) {
			return null;
		}

		for (var i = 0; i < dataArr.length; i++) {
			if (dataArr[i].value == value) {
				return dataArr[i];
			} else {
				var val = findSelectedValue(dataArr[i].children, value);
				if (val) {
					return val;
				}
			}
		}

		return null;
	}

	/**
	 * 在json数组中找到当前值的json对象
	 */
	function findSelectedValues(selectedValue, dataArr, values) {
		if (!dataArr || !values) {
			return;
		}
		for (var i = 0; i < dataArr.length; i++) {
			dataArr[i].selected = 0;
			if (!dataArr[i].children || dataArr[i].children.length == 0) {
				for (var j = 0; j < values.length; j++) {
					var value = values[j];
					if (dataArr[i].value == value) {
						dataArr[i].selected = 1;
						selectedValue.push(dataArr[i]);
						break;
					}
				}
			} else {
				findSelectedValues(selectedValue, dataArr[i].children, values);
			}
		}
	}

	/**
	 * 把当前的json值转为字符串
	 */
	function getDataString(tmpData, joinStr) {

		if (!tmpData) {
			return "";
		}
		var txtArr = new Array();
		txtArr.push(tmpData.text);
		var parent = tmpData.parent;
		while (parent) {
			txtArr.push(parent.text);
			parent = parent.parent;
		}
		return txtArr.reverse().join(joinStr);
	}

	/**
	 * 改变值时的处理。如果设置了监听，会触发onChanged事件。如果onChanged返回false,可以让事件的处理取消，值不改变。
	 */
	function changeValue($target, newValue) {

		var oldValue = $target.data("selectedValue");
		var options = $target.data('comboMenu').options;

		if (options.onChanged && oldValue != newValue) {
			var result = options.onChanged(oldValue, newValue);
			if (result == false) {
				return;
			}
		}

		var text = "";

		if (options.showSingleLevel == false) {

			text = getDataString(newValue, options.joinStr);
		} else {
			text = !newValue ? "" : newValue.text;
		}

		$target.find(".comboMenu_text").html(text);
		$target.attr("title", text);
		$target.data("selectedValue", newValue);
	}

	/**
	 * 把传过来的data处理一下，在拷贝之前，加上全部数据
	 */
	function processData(data, addAllData) {
		var processData = new Array();
		if (addAllData) {
			processData.push({
				value : "",
				text : "全部数据"
			});
		}
		return processData.concat(copyJsonArray(data));
	}

	/**
	 * 点击comboMenu外的事件，以关闭comboMenu
	 */
	function comboMenuOuterClick(e) {
		if ($(e.target).parents(".comboMenu").length == 0) {
			$(".comboMenu").each(function() {
				$(this).comboMenu("hideCombo");
			});
		} else {
			$(".comboMenu").each(function() {
				if ($(e.target).parents(".comboMenu").attr("id") != $(this).attr("id")) {
					$(this).comboMenu("hideCombo");
				}
			});
		}
	}

	/**
	 * 拷贝json的数组
	 */
	function copyJsonArray(objArr) {
		var copyArr = new Array();
		if (!objArr) {
			return copyArr;
		}
		for (var i = 0; i < objArr.length; i++) {
			copyArr.push($.extend(true, {}, objArr[i]));
		}
		return copyArr;
	}

	$.fn.comboMenu = function(options, param) {

		var $target = $(this);

		if (typeof options == 'string') {
			return $.fn.comboMenu.methods[options]($target, param);
		}

		// 如果支持多选，强制显示全部数据
		if (options.multiple && options.multiple == true) {
			options.hasAllData = true;
		}

		options = options || {};

		var state = $target.data('comboMenu');
		if (state) {
			$.extend(state.options, options);
		} else {
			state = $target.data('comboMenu', {
				options : $.extend({}, $.fn.comboMenu.defaults, options)
			});
			init($target);
		}
	};

	/**
	 * 定义的comboMenu的方法
	 */
	$.fn.comboMenu.methods = {
		// 返回comboMenu的选择值，如果是单选，返回json对象。如果是多选，返回的是json数组
		getValue : function($target) {
			return $target.data("selectedValue");
		},
		// 设置comboMenu的选择值，如果是单选，设置json对象。如果是多选，设置的是json数组
		setValue : function($target, value) {

			var comboMenuData = $target.data("comboMenuData");
			var selectedValue = null;
			var options = $target.data('comboMenu').options;

			// 单选处理，单选的话，value是一个json对象
			if (!options.multiple) {
				selectedValue = findSelectedValue(comboMenuData, value);
			}
			// 多选处理，如果是多选，在找到选择值的同时，还要给该值设上selected=1（选择），并处理它们的父节点到祖先的节点状态
			else {
				selectedValue = new Array();

				// 如果设置的值是空，空字符、空数据，则把值当成“全部数据”处理。
				if (!value || value == "" || ($.isArray(value) && value.length == 0)) {
					value = [ "" ];
				}
				// 如果不是数组，返回
				else if (!$.isArray(value)) {
					return;
				}
				// 如果包含空字符，也按全部数据来处理
				else {
					for (var i = 0; i < value.length; i++) {
						if (value[i] == "") {
							value = [ "" ];
							break;
						}
					}
				}

				findSelectedValues(selectedValue, comboMenuData, value);
				if (comboMenuData && comboMenuData.length > 0) {
					for (var i = 0; i < comboMenuData.length; i++) {
						processMultipleStates(comboMenuData[i]);
					}
				}

				showMutipleText($target, options, selectedValue);
			}

			changeValue($target, selectedValue);
		},
		setData : function($target, data) {
			var options = $target.data('comboMenu').options;
			options.data = data;
			var data = processData(options.data, options.hasAllData);
			if (options.addParentAndLevel) {
				addParentAndLevel(data, null, 0);
			}
			$target.data("comboMenuData", data);
		},
		setReadOnly : function($target, readOnly) {
			var options = $target.data('comboMenu').options;
			options.readOnly = readOnly;
		},
		getOptions : function($target) {
			return $target.data('comboMenu').options;
		},
		hideCombo : function($target) {

			var $popArr = $target.data("popArr");

			if ($popArr[0].css("display") != "none") {
				$popArr[0].find("[log=search_cate]").val("");
				hideSubPopFrom($target, 0);
			}
		}
	};

	/**
	 * comboMenu的默认设置
	 */
	$.fn.comboMenu.defaults = {
		height : 30,
		width : 190,
		popWidth : null, // 除了第一级的下拉菜单，其它下拉菜单的宽。如果不设，会默认与width值相等
		showSingleLevel : true, // 是否只显示选择值的单级值。如果是false,则显示其祖先到本级的值
		allLeafCanSelect : false, // 所有的节点都可以选。默认为false，也就是只有最末级的节点可以选
		hasAllData : false, // 是否添加所有数据可以选择的条目，如果设置为true，在下拉里的第一级的第一行会有一个“全部数据”的选项
		joinStr : " > ", // 搜索功能后，父子级之间的连接字符
		title : "", // 标题
		useSearch : true, // 是否用搜索功能
		multiple : false, // 是否支持多选，如果支持多选，只能选择最末级的条目。
		readOnly : false, // 是否为只读状态。
		addParentAndLevel : true, // 是否需要控件来添加parent和level属性。默认为true。如果数据已经有parent和level属性了，可设置为false。
		onChanged : null, // onChanged事件，如果是单选，返回false可以取消事件，多选不可以取消事件。只会触发
		onShow : null,
		onHide : null,
		onClick : null
	};
})(jQuery);
/**
 * 需求度图谱jquery插件
 * @author songquanwang
 */
 ;var mockData = {
	key : "血糖仪",
	period : "2014-10-14 - 2014-10-14",
	features : [{
				"ratio" : 140,
				"value_r" : 830,
				"value" : 110,
				"feature" : "血糖仪",
				"attrValues" : [],
				"attrName" : "类别",
				"attrDegree" : 3819,
				"attrChange" : 100,
				"attrValue" : "血糖仪",
				"degree" : 2960,
				"change" : 100
			}, {
				"ratio" : 20,
				"value_r" : 841.5,
				"value" : 10,
				"feature" : "试纸",
				"attrValues" : [],
				"attrName" : "类别",
				"attrDegree" : 3819,
				"attrChange" : 100,
				"attrValue" : "试纸",
				"degree" : 829,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 830,
				"value" : 110,
				"feature" : "三诺",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "三诺",
				"degree" : 574,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 630,
				"value" : 310,
				"feature" : "罗氏",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "罗氏",
				"degree" : 555,
				"change" : 100
			}, {
				"ratio" : 20,
				"value_r" : 671.5,
				"value" : 210,
				"feature" : "强生",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "强生",
				"degree" : 134,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 630,
				"value" : 310,
				"feature" : "鱼跃",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "鱼跃",
				"degree" : 124,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 671.5,
				"value" : 210,
				"feature" : "欧姆龙",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "欧姆龙",
				"degree" : 114,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 430,
				"value" : 510,
				"feature" : "罗康全",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "罗康全",
				"degree" : 66,
				"change" : 100
			}, {
				"ratio" : 20,
				"value_r" : 501.5,
				"value" : 410,
				"feature" : "ROCHE",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "ROCHE",
				"degree" : 56,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 430,
				"value" : 510,
				"feature" : "怡成",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "怡成",
				"degree" : 44,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 501.5,
				"value" : 410,
				"feature" : "会好",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "会好",
				"degree" : 42,
				"change" : 100
			}, {
				"ratio" : 380,
				"value_r" : 430,
				"value" : 510,
				"feature" : "艾科",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "艾科",
				"degree" : 34,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 230,
				"value" : 710,
				"feature" : "雅培",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "雅培",
				"degree" : 33,
				"change" : 100
			}, {
				"ratio" : 20,
				"value_r" : 331.5,
				"value" : 610,
				"feature" : "采血针",
				"attrValues" : [],
				"attrName" : "类别",
				"attrDegree" : 3819,
				"attrChange" : 100,
				"attrValue" : "采血针",
				"degree" : 30,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 230,
				"value" : 710,
				"feature" : "拜耳",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "拜耳",
				"degree" : 23,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 331.5,
				"value" : 610,
				"feature" : "九安",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "九安",
				"degree" : 21,
				"change" : 100
			}, {
				"ratio" : 380,
				"value_r" : 230,
				"value" : 710,
				"feature" : "OMRON",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "OMRON",
				"degree" : 14,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 331.5,
				"value" : 610,
				"feature" : "美国会好",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "美国会好",
				"degree" : 12,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 30,
				"value" : 910,
				"feature" : "美迪信",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "美迪信",
				"degree" : 12,
				"change" : 100
			}, {
				"ratio" : 20,
				"value_r" : 161.5,
				"value" : 810,
				"feature" : "进口",
				"attrValues" : [],
				"attrName" : "产地",
				"attrDegree" : 12,
				"attrChange" : 100,
				"attrValue" : "进口",
				"degree" : 11,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 30,
				"value" : 910,
				"feature" : "测利得",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "测利得",
				"degree" : 9,
				"change" : 100
			}, {
				"ratio" : 140,
				"value_r" : 161.5,
				"value" : 810,
				"feature" : "瑞迪恩",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "瑞迪恩",
				"degree" : 8,
				"change" : 100
			}, {
				"ratio" : 380,
				"value_r" : 30,
				"value" : 910,
				"feature" : "BAYER",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "BAYER",
				"degree" : 7,
				"change" : 100
			}, {
				"ratio" : 260,
				"value_r" : 161.5,
				"value" : 810,
				"feature" : "AIKE",
				"attrValues" : [],
				"attrName" : "品牌",
				"attrDegree" : 1895,
				"attrChange" : 100,
				"attrValue" : "AIKE",
				"degree" : 4,
				"change" : 100
			}, {
				"ratio" : 500,
				"value_r" : 30,
				"value" : 910,
				"feature" : "虹吸式",
				"attrValues" : [],
				"attrName" : "采血方式",
				"attrDegree" : 4,
				"attrChange" : 100,
				"attrValue" : "虹吸式",
				"degree" : 4,
				"change" : 100
			}]

};
(function($) {
	var methods = {
		init : function(options) {
			var scope=this;
			// rapher
			var attrs = Raphael._availableAttrs;
			attrs.font = '12px "Arial", "Microsoft Yahei"';
			attrs["font-size"] = "12";
			if (!Raphael.svg)
				attrs.font = '12px "Microsoft Yahei"', attrs["font-size"] = "12";
			this.opts = options;
			this.sets = {
				stsTitl : {},
				stsBgs : {},
				stsTags : {},
				stsValv : {},
				stsPoly : {},
				stsCirc : {},
				stsText : {},
				stsHove : {},
				stsLayer : {}
			};
			this.OPTS = {
				padds : {
					title : 10,
					left : 10,
					right : 20,
					bottom : 20,
					maxR : 9,
					bgLbar : 38,
					bgCright : 15,
					tagHig : 0
				}
			};
			this.paper = Raphael(options.divID);
			this.topN = options.topN || 4;
			this.opts.padds = this.sCopy(this.padds || {}, this.OPTS.padds);
			this.paper.gsid = this.gsid();
			return methods;
		},
		sCopy : function(a, c) {
			for (var d in c)
				d in a || (a[d] = c[d]);
			return a;
		},
		getColor : function(a) {
			var b = ["#6e87d7", "#11c897", "#fa7256", "#b172c5", "#f367a7"],
			c = b.length;
			return b[(a || 0) % c];
		},
		each : function() {
			$.each.apply(this, arguments);
		},
		gsid : function(a) {
			var c = 0;
			a += "_gsid_";
			return function(d) {
				var e = d ? d.id || "" : "";
				if (e === "")
					e = a + c++, d && (d.id = e);
				return e;
			};
		}("auto"),
		drawBg : function() {
			function n(h) {
				var o = l.slice();
				o[13] = o[9] += h;
				o[11] += h;
				return o;
			}
			var j = this.paper, i = $("#" + this.opts.divID);
			j = j.setSize(i.width(), i.height());
			i = this.opts.padds;
			var p = i.width = j.width, x = i.height = j.height, u = i.bgTop = i.title
					+ i.tagHig, y = i.bgWidth = p - i.left - i.right, z = i.bgHeight = x
					- u - i.bottom, C = i.bgRight = p - i.right;
			y = i.bgCwidth = y - i.bgCright - i.bgLbar;
			var c = i.bgBottom = x - i.bottom, a = i.bgMiddle = u + z / 2, d = this.sets, b = d.stsBgs;
			d = d.stsLayer;
			for (var e = b.bgCircs || (b.bgCircs = []), g = ["#dbdfeb",
					"#e4e7f2", "#eaecf5", "#f0f2f8", "#f3f5f9", "#f7f8fa"], f = g.length; f--;)
				(e[f] || (e[f] = j.circle(i.left + i.bgLbar, a, 0).attr({
							stroke : "#ffffff",
							"stroke-weight" : 1
						}))).attr({
							r : y * (f + 1) / 6,
							fill : g[f]
						});
			(b.axisX || (b.axisX = j.path().attr({
						stroke : "#ffffff",
						"stroke-width" : 1
					}))).attr({
						path : ["M", 0, a, p, a]
					});
			p = ["M", -5, -5, "L", -5, 5 + x, 5 + p, 5 + x, 5 + p, c, i.left,
					c, i.left, u, 5 + p, u, 5 + p, -5, -5, -5];
			(b.bgMask || (b.bgMask = j.path().attr({
						fill : "#ffffff",
						stroke : "none"
					}))).attr({
						path : p
					});
			(b.lBar || (b.lBar = j.rect().attr({
						fill : "#f7f8fa",
						stroke : "#dbdfeb",
						"stroke-width" : "0.9"
					}))).attr({
						x : i.left,
						y : u + 1,
						width : i.bgLbar,
						height : z - 2
					});
			var l = ["M", 17, 0, "L", 34, 13, 29, 13, 29, 23, 17, 13, 5, 23, 5,
					13, 0, 13, 17, 0];
			(b.arrUp || (b.arrUp = j.path(n(40)).attr({
						stroke : "none",
						fill : "#ffb049"
					}))).transform("t" + (i.left + 2) + "," + (u + 2));
			(b.arrUp_ex || (b.arrUp_ex = j.path(["M", 0, 0, "L", 24, 0, 24, 24,
					0, 24, 0, 0]).attr({
						stroke : "none",
						fill : "90-#ffffff-#ffb049"
					}))).transform("t" + (i.left + 7) + "," + (u + 45));
			(b.arrDown || (b.arrDown = j.path(n(40)).attr({
						stroke : "none",
						fill : "#606e82"
					}))).transform("t" + (i.left + (Raphael.svg ? 2 : -1))
					+ "," + (c - 40 - 26) + "r180");
			(b.arrDown_ex || (b.arrDown_ex = j.path(["M", 0, 0, "L", 24, 0, 24,
					24, 0, 24, 0, 0]).attr({
						stroke : "none",
						fill : "90-#606e82-#ffffff"
					}))).transform("t" + (i.left + 7) + "," + (c - 40 - 30));
			(b.arrRight || (b.arrRight = j.path(n(66)).attr({
						stroke : "none",
						fill : "#999999"
					}))).transform("t" + (C - 66 - 13) + "," + (a - 33 - 12)
					+ "r90");
			(b.arrRight_ex || (b.arrRight_ex = j.path(["M", 0, 0, "L", 24, 0,
					24, 24, 0, 24, 0, 0]).attr({
						stroke : "none",
						fill : "0-#ffffff-#999999"
					}))).transform("t" + (C - 66 - 45) + "," + (a - 12.5));
			(b.txtUp || (b.txtUp = j.text(0, 0, "上升".split("").join("\n"))
					.attr({
								"text-anchor" : "start",
								fill : "#ffffff"
							}))).attr({
						x : i.left + 13,
						y : u + 32
					});
			(b.txtUp2 || (b.txtUp2 = j
					.text(0, 0, "环比需求变化".split("").join("\n")).attr({
								"text-anchor" : "start",
								fill : "#999999"
							}))).attr({
						x : i.left + 13,
						y : u + 110
					});
			(b.txtDown2 || (b.txtDown2 = j.text(0, 0,
					"环比需求变化".split("").join("\n")).attr({
						"text-anchor" : "start",
						fill : "#999999"
					}))).attr({
						x : i.left + 13,
						y : c - 110
					});
			(b.txtDown || (b.txtDown = j.text(0, 0, "下降".split("").join("\n"))
					.attr({
								"text-anchor" : "start",
								fill : "#ffffff"
							}))).attr({
						x : i.left + 13,
						y : c - 32
					});
			(b.txtRight || (b.txtRight = j.text(0, 0, "需求度变弱").attr({
						"text-anchor" : "start",
						fill : "#ffffff"
					}))).attr({
						x : C - 66 - 26,
						y : a - 1
					});
			(b.circWord || (b.circWord = j
					.circle(i.left + i.bgLbar + 30, a, 55))).attr({
						fill : this.getColor(0),
						stroke : "#ffffff",
						"stroke-width" : 6
					});
			(b.textWord || (b.textWord = j.text(i.left + i.bgLbar + 30, a, "")))
					.attr({
								fill : "#ffffff",
								"font-size" : "14px"
							});
			(b.textNodata || (b.textNodata = j.text(0, 0, "无数据").hide()))
					.attr(this.sCopy({
								x : y / 2,
								y : a
							}, "无数据"));
			if (!d.bg)
				d.bg = j.path();
			return this;
		},
		/**
		 * 设置数据
		 */
		setData : function(n) {
			var maxX = 0;
			var maxY = 0;
			n.items = [];
			$.each(n.features, function(j, i) {
						n.items.push({
									text : i.feature,
									value_r : i.value_r / 1E3,
									xy : [i.value / 1E3, i.ratio / 1E3],
									attrValues : i.attrValues,
									degree : i.degree,
									attrValue : i.attrValue,
									change : i.change,
									attrName : i.attrName,
									attrDegree : i.attrDegree,
									attrChange : i.attrChange
								});
					});
			this.datas = n;
			return this;
		},
		/**
		 * 画数据点
		 */
		drawCircle : function(n) {
			// 定义scope
			var scope = this;
			var j = this.opts.padds, i = j.bgHeight / 2, p = Math
					.sqrt(j.bgCwidth * j.bgCwidth - i * i), x = j.bgCwidth / 6, u = this.paper, y = this.sets, z = y.stsCirc, C = z[""]
					|| (z[""] = []);
			z = y.stsText;
			var c = z[""] || (z[""] = []);
			z = y.stsLayer;
			if (n) {
				y.stsBgs.circWord.attr({
							fill : n
						});
				y.stsBgs.textWord.attr({
							text : this.text_n(this.datas.key)
						});
			}
			if (!this.datas)
				return this;
			$.each(this.datas.items, function(a, d) {
						// 正数增长 负数下降
						var attrText = " 环比增长:";
						var attrValueText = " 环比增长：";
						if (d.attrChange < 0) {
							attrText = " 环比下降：";
							d.attrChange = -d.attrChange;
						}
						if (d.change < 0) {
							attrValueText = " 环比下降：";
							d.change = -d.change;
						}
						var b = d.xy.slice(), e = 0, g = Math
								.floor((1 - d.value_r) * 5);
						g = Math.floor(d.xy[0] * 5);
						if (g > 4)
							g = 4;
						e = j.maxR - g * 1.5;
						b[0] *= p - j.maxR;
						b[1] *= i - j.maxR;
						if (g == 4)
							b[1] = d.xy[1] * (i - j.maxR - 20)
									+ (d.xy[1] >= 0 ? 20 : -20);
						var f = Math.sqrt(x * (g + 2) * x * (g + 2) - b[1]
								* b[1]);
						f -= e;
						var l = Math.abs(b[1]) < x * (g + 1) ? Math.sqrt(x
								* (g + 1) * x * (g + 1) - b[1] * b[1]) : 0;
						l += e;
						b[0] = (f - l) * (d.xy[0] - 0.2 * g) / 0.2 + l;
						b[0] += j.left + j.bgLbar;
						b[1] = j.bgMiddle - b[1];
						(C[a] || (C[a] = u.circle().attr({
									stroke : "#ffffff"
								}).data("posInfo", {
									text : d.text,
									attrValues : d.attrValues,
									"cx" : b[0],
									"cy" : b[1]
								}).hover(function() {
							this.attr("r", this.data("cr") * 1.4);
							var str = scope.createPopTable(
									this.data("posInfo").text, this
											.data("posInfo").attrValues);
							$("#popover div").remove();
							$("#popover").append(str);
							$("#popover div").css({
										display : "block",
										left : this.data("posInfo").cx,
										top : this.data("posInfo").cy,
										"z-index" : "100000000"
									});
						}, function() {
							this.attr("r", this.data("cr"));
							$("#popover div").css({
										display : "none"
									});
						}))).attr({
							cx : b[0],
							cy : b[1],
							r : e,
							fill : d.xy[1] >= 0 ? "#ffb049" : "#606e82",
							"stroke-width" : 2,
							// title : d.text
							title : '"属性" ' + d.attrName + ' 搜索次数：'
									+ d.attrDegree + attrText + d.attrChange
									+ '%\r"属性值 "' + d.attrValue + '搜索次数：'
									+ d.degree + attrValueText + d.change + "%"
						}).data("cr", e).show();

						f = b[0] + e + 3;
						b = b[1];
						if (b + 8 > j.bgBottom)
							b = j.bgBottom - 8;
						else if (b - 8 < j.bgTop)
							b = j.bgTop + 8;
						(c[a] || (c[a] = u.text().attr({
									"text-anchor" : "start"
								}))).attr({
									x : f,
									y : b,
									text : d.text,
									fill : g > 2 ? "#999999" : "#333333",
									title : d.text

								}).show();
						if (g > 3) {
							d = c[a].getBBox().width;
							if (f + d > j.bgRight - j.bgCright) {
								f -= d + e * 2 + 6;
								c[a].attr({
											x : f
										});
							}
						}
					});
			for (n = this.datas.items.length; n < C.length; n++) {
				C[n].hide();
				c[n].hide();
			}
			y.stsBgs.textNodata[this.datas.items.length ? "hide" : "show"]();
			if (!z.circ)
				z.circ = u.path();
			return this;
		},
		/**
		 * 
		 */
		text_n : function(n) {
			for (var j = [], i = n.length, p = 0; p < i - 1; p++)
				if (n.charCodeAt(p) < 256 && n.charCodeAt(p + 1) < 256) {
					j.push(n.slice(p, p + 2));
					p++;
				} else
					j.push(n.slice(p, p + 1));
			p < i && j.push(n.slice(-1));
			if (j.length > 12) {
				j.length = 11;
				j.push("aaa");
			}
			i = j.length;
			i > 6 && j.splice(Math.floor(i / 2), 0, "\n");
			return j.join("");
		},
		/**
		 * 
		 */
		createPopTable : function(attrName, attrValues) {
			// tyle=\"position:absolute;background-color:white;border-radius:
			// 6px;border: 1px solid rgba(0, 0, 0, 0.2);\"
			// 如果没有属性值，不弹出窗口
			if (attrValues.length == 0) {
				return "";
			}
			var tableStr = "<div  style=\"position:absolute;background-color:white;border-radius: 6px;border: 1px solid rgba(0, 0, 0, 0.2);\"class=\" table-responsive\">"
					+ "<table class=\"table table-bordered table-hover table-striped\">"
					+ "<thead>"
					+ "<tr style=\"width:400px\">"
					+ "<th>"
					+ attrName
					+ "</th>"
					+ "<th>搜索次数</th>"
					+ "<th>搜索次数环比变化</th>" + "</thead>" + "<tbody>";

			for (var i = 0; i < attrValues.length; i++) {
				var child = attrValues[i];
				tableStr += "<tr>";
				tableStr += "<td>" + child.attrValue + "</td>";
				tableStr += "<td>" + child.degree + "</td>";
				tableStr += "<td>" + child.change + "</td>";
				tableStr += "</tr>";
			}
			tableStr += "</tbody>";
			tableStr += "</table>";
			tableStr += "</div>";
			// alert(tableStr);

			return tableStr;

		}

	};

	$.fn.demandGraph = function(method) {

		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(
							arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return methods.init.apply(methods, arguments);
		} else {
			$.error('Method ' + method + ' does not exist on jQuery.demandGraph');
		}

	};

})(jQuery);
/**
 * province picker
 * 地区选择弹出层函数
 * objid 选择区域的ID(input id) showid 弹出DIV的id input_cn 选择区域的ID(input id) input
 * input id 选择地区后将值放在input的隐藏变量中 QSarr strlen
 * 
 * @songquanwang
 */
;
(function($) {
		var areas = [{
			areaName : '华北地区',
			citys : [{
						cityName : '北京',
						cityCode : 'BJ'
					}, {
						cityName : '天津',
						cityCode : 'TJ'
					}, {
						cityName : '河北',
						cityCode : 'HBS'
					}, {
						cityName : '山西',
						cityCode : 'SXS'
					}, {
						cityName : '内蒙古',
						cityCode : 'NMGQ'
					}]
		},

		{
			areaName : '东北地区',
			citys : [{
						cityName : '辽宁',
						cityCode : 'LNS'
					}, {
						cityName : '吉林',
						cityCode : 'JLS'
					}, {
						cityName : '黑龙江',
						cityCode : 'HLJS'
					}]
		},

		{
			areaName : '华东地区',
			citys : [{
						cityName : '上海',
						cityCode : 'SH'
					}, {
						cityName : '江苏',
						cityCode : 'JS'
					}, {
						cityName : '浙江',
						cityCode : 'ZJ'
					}, {
						cityName : '安徽',
						cityCode : 'AHS'
					}, {
						cityName : '福建',
						cityCode : 'FJS'
					}, {
						cityName : '江西',
						cityCode : 'JXS'
					}
					, {
						cityName : '山东',
						cityCode : 'SDS'
					}]
		},

		{
			areaName : '华中地区',
			citys : [{
						cityName : '河南',
						cityCode : 'HNS'
					}, {
						cityName : '湖北',
						cityCode : 'HBS'
					}, {
						cityName : '湖南',
						cityCode : 'HUNS'
					}]
		},

		{
			areaName : '华南地区',
			citys : [{
						cityName : '广东',
						cityCode : 'GDS'
					}, {
						cityName : '广西',
						cityCode : 'GXS'
					}, {
						cityName : '海南',
						cityCode : 'HANS'
					}]
		},

		{
			areaName : '西南地区',
			citys : [{
						cityName : '重庆',
						cityCode : 'CQS'
					}, {
						cityName : '四川',
						cityCode : 'SCS'
					}, {
						cityName : '贵州',
						cityCode : 'GZS'
					}, {
						cityName : '云南',
						cityCode : 'YNS'
					}, {
						cityName : '西藏',
						cityCode : 'XZQ'
					}]
		},

		{
			areaName : '西北地区',
			citys : [{
						cityName : '陕西',
						cityCode : 'SXS'
					}, {
						cityName : '甘肃',
						cityCode : 'GSS'
					}, {
						cityName : '青海',
						cityCode : 'QHS'
					}, {
						cityName : '宁夏',
						cityCode : 'NXS'
					}, {
						cityName : '新疆',
						cityCode : 'XJS'
					}]
		}];

	var methods = {
		init : function(options) {
	        var id=options.showid.substring(1);
			var tpl=$('<div id="'+id+'">'+
					'<div class="OpenFloatBox">'+
						'<div class="modal fade" id="contactUsModal" tabindex="-1" '+
							'role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"> '+
							'<div class="modal-dialog"> '+
								'<div class="modal-content"> '+
									'<div class="modal-header"> '+
										'<button type="button" class="close" data-dismiss="modal" '+
											'aria-hidden="true" id="contactAdmin_closeBtn"> '+
											'&times;</button> '+
										'<button id="saleAreaTop" name="area" type="button" '+
											'class="btn btn-primary">销售区域</button> '+
									'</div> '+
									'<div class="modal-body"> '+
										'<div id="sel_district" '+
											'style="border-top: solid 0px; border-color: #C0C0C0;"> '+
											'<div id="saleArea"> '+
												'<table class="table table-condensed" border="0"> '+	
                                                '</table> '+
											'</div> '+
										
											
										'</div> '+
										'<div class="txt"> '+
												'<div class="selecteditem"></div> '+
											'</div> '+									
									'</div> '+
									' <div class="modal-footer">'+
        									
											'<div class="txt"> '+
												'<div align="center"> '+
													'<button id="confirmName" type="button" data-dismiss="modal" '+
														'name="confirmName" class="btn btn-primary">确定</button> '+
												'</div> '+
											'</div> '+       
      									'</div>'+	
								'</div> '+
							'</div> '+
						'</div> '+
					'</div> '+
				'</div> ');
            $.each(areas, function(k, v) {
            	    var child=v;
            	    var str='<tr><td>'+v.areaName+'</td>';
            	    $.each(v.citys, function(ck, cv) {
            	    	str+='<td>'+
            	    	     '<td> '+
								'<div class="item" id="BJ"> '+
									'<label title='+cv.cityName+' class="titem">  '+
									 '<input type="checkbox" value='+cv.cityCode+'  title='+cv.cityName+'  class="b" /> '+cv.cityName+
									'</label> '+
									'<div class="sitem"></div> '+
								'</div> '+
							'</td> ';
            	    	
            	    });
            	    str+='</tr>'
					tpl.find(".table.table-condensed").append(str);
				});
			tpl.appendTo("body");

			var data = $(this).data('provincepicker');
			//没有配置项
			var opt = $.extend({

			}, options);
     
			this.OpenCategoryLayer(opt.objid, opt.showid, opt.input_cn, opt.input, opt.input_cn2,
				opt.input2, opt.QSarr, opt.strlen);
			return this;

		},

		destroy : function() {

			$(this).removeData('provincepicker');

		},
		OpenCategoryLayer : function(objid, showid, input_cn, input, input_cn2,
				input2, QSarr, strlen) {
			var scope=this;
			$(objid).click(function() {
				$(this).blur();
				$(showid + " .OpenFloatBoxBg").css("opacity", 0.2);
				$(showid).show();
				//$("#contactUsModal").removeClass("modal fade");
				$(showid + " .OpenFloatBox").css({
					"left" : ($(document).width() - $(showid + " .OpenFloatBox")
							.width())
							/ 2,
					"top" : "120",
					"z-index" : "999"
				});
				scope.SetBoxBg(showid);
				$(showid + " .item").unbind().hover(function() {
					$(this).find(".titem").addClass("titemhover");

					var strclass = QSarr[$(this).attr("id")];
					var pid = $(this).attr("id");
					if (strclass) {
						$(this).find(".sitem").css("display", "block");
						if ($(this).find(".sitem").html() == "") {
							$(this).find(".sitem").html(scope.MakeLi(strclass, pid));// 生成LI
						}
					}
					$(showid + " .OpenFloatBox label").unbind().click(
							function() {
								if ($(this).attr("title")) {
									if ($(this).find(":checkbox")
											.attr('checked')) {
										$(this).next().find(":checkbox").attr(
												'checked', true);
									} else {
										$(this).next().find(":checkbox").attr(
												'checked', false);
									}
								} else {
									if ($(this).parent()
											.find(":checkbox:checked").length > 0) {
										$(this).parent().prev()
												.find(":checkbox").attr(
														'checked', false);
									}
								}
								scope.CopyItem(showid);
							});
				}, function() {
					$(this).find(".titem").removeClass("titemhover");
					$(this).find(".sitem").css("display", "none");
				});
				$(showid + " .OpenFloatBox .DialogClose").unbind().hover(
						function() {
							$(this).addClass("spanhover")
						}, function() {
							$(this).removeClass("spanhover")
						});

				$(showid + " .close").click(function() {
							DialogClose(showid);
						});

				// 确定选择 按钮的ID 必须是 confirmName
				$("#confirmName").unbind().click(function() {
					SetInput(showid, input_cn, input, input_cn2, input2, strlen);
				});

				// 关闭
				function DialogClose(showid) {
					$(showid).hide();
				}
				// 设置表单
				function SetInput(showid, input_cn, input, input_cn2, input2,
						strlen) {
					var a_cn = new Array();
					var a_id = new Array();
					var i = 0;
					if ($(showid
							+ " .OpenFloatBox .selecteditem :checkbox:checked").length > 8) {
						alert("不能超过8个选项");
						return false;
					}
					$(showid
							+ " .OpenFloatBox .selecteditem :checkbox:checked")
							.each(function(index) {
								a_cn[index] = $(this).attr("title");
								if ($(this).attr("class") == "s") {
									a_id[i] = $(this).val();
								} else {
									a_id[i] = $(this).attr("id") + "."
											+ $(this).val();
								}
								i++;
							});
					$(input_cn).val(scope.limit(a_cn.join("+"), strlen));
					$(input_cn).attr("title", $(input_cn).val());
					$(input_cn2).val(scope.limit(a_cn.join("+"), strlen));
					if ($(input_cn).val() == "")
						$(input_cn).val("全部数据");
					if ($(input_cn2).val() == "")
						$(input_cn2).val("全部数据");
					$(input).val(a_id.join("-"));
					$(input2).val(a_id.join("-"));
					DialogClose(showid);
					//$("#contactUsModal").addClass("modal fade");
				}
			});
		},
		// 设置阴影
		SetBoxBg : function(showid) {
			var FloatBoxWidth = $(showid + " .OpenFloatBox").width();
			var FloatBoxHeight = $(showid + " .OpenFloatBox").height();
			var FloatBoxLeft = $(showid + " .OpenFloatBox").offset().left;
			var FloatBoxTop = $(showid + " .OpenFloatBox").offset().top;
			$(showid + " .OpenFloatBoxBg").css({
						display : "block",
						width : (FloatBoxWidth + 12) + "px",
						height : (FloatBoxHeight + 12) + "px"
					});
			$(showid + " .OpenFloatBoxBg").css({
						left : (FloatBoxLeft - 5) + "px",
						top : (FloatBoxTop - 5) + "px"
					});
		},
		// 生成小类
		MakeLi : function(val, pid) {
			if (val == "")
				return false;
			arr = val.split("|");
			var htmlstr = '';
			for (x in arr) {
				var v = arr[x].split(",");
				htmlstr += "<label><input type=\"checkbox\" value=\"" + v[0]
						+ "\" title=\"" + v[1] + "\" class=\"s\" id=\"" + pid
						+ "\"/>" + v[1] + "</label><br/>";
			}
			return htmlstr;
		},
		// 拷贝
		CopyItem : function(showid) {
			var scope=this;
			var htmlstr = '&nbsp;&nbsp;&nbsp;已经选择分类：<div class=\"btn-group btn-group-sm\"> <button type=\"button\" class=\"empty btn btn-default\">清空已选</button></div><br/><nobr>';
			$(showid + " .item :checkbox:checked[class='b']").each(
					function(index) {
						htmlstr += "<label>"
								+ "      &nbsp;&nbsp;&nbsp;&nbsp;<input class=\"s\"  type=\"checkbox\" value=\""
								+ $(this).attr("value") + "\" title=\""
								+ $(this).attr("title") + "\" checked/>"
								+ $(this).attr("title") + "</label>";
					})
			$(showid + " .item :checkbox:checked[class='s']").each(
					function(index) {
						if ($(this).parent().parent().prev().find(":checkbox")
								.attr('checked') == false) {
							htmlstr += "<label>"
									+ "   <input class=\"s\"  type=\"checkbox\" id=\""
									+ $(this).attr("id") + "\" value=\""
									+ $(this).attr("value") + "\" title=\""
									+ $(this).attr("title") + "\" checked/>"
									+ $(this).attr("title") + "</label>";
						}
					})
			htmlstr += "<div class=\"clear\"></div></nobr>";
			$(showid + " .selecteditem").html(htmlstr);
			if ($(showid + " .item :checkbox:checked").length > 0) {
				$(showid + " .selecteditem").css("display", "block");
			} else {
				$(showid + " .selecteditem").css("display", "none");
			}
			// 已选项目绑定click
			$(showid + " .selecteditem :checkbox").unbind().click(function() {
				var selval = $(this).val();
				$(showid + " .item :checkbox:checked").each(function() {
					if ($(this).val() == selval) {
						$(this).attr("checked", false);
						if ($(this).attr("class") == "b") {
							$(this).parent().next().find(":checkbox").attr(
									"checked", false);
						}
						// 重新克隆
						scope.CopyItem(showid);
					}
				})
			});
			$(showid + " .OpenFloatBox .item label :checkbox").parent().css(
					"color", "");
			$(showid + " .OpenFloatBox .item label :checkbox:checked")
					.parent().css("color", "#FF6600");
			$(showid + " .OpenFloatBox .sitem :checkbox:checked").each(
					function(index) {
						$(this).parent().parent().prev()
								.css("color", "#FF6600");
					});
			this.SetBoxBg(showid);
			// 清空
			$(showid + " .selecteditem .empty").unbind().click(function() {
				$(showid + " .selecteditem").css("display", "none");
				$(showid + " .selecteditem").html("");
				$(showid + " :checkbox:checked").parent().css("color", "");
				$(showid + " :checkbox:checked").parent().parent().prev().css(
						"color", "");
				$(showid + " :checkbox:checked").attr('checked', false);
				scope.SetBoxBg(showid);
			});
		},
		// 截取字符
		limit : function(objString, num) {
			var objLength = objString.length;
			if (objLength > num) {
				return objString.substring(0, num) + "...";
			}
			return objString;
		},
		// 模拟select
		showmenu : function(menuID, showID, inputname) {
			$(menuID).click(function() {
				$(menuID).blur();
				$(menuID).parent("div").css("position", "relative");
				$(showID).slideToggle("fast");
				// 生成背景
				$(menuID).parent("div")
						.before("<div class=\"menu_bg_layer\"></div>");
				$(".menu_bg_layer").height($(document).height());
				$(".menu_bg_layer").css({
							width : $(document).width(),
							position : "absolute",
							left : "0",
							top : "0",
							"z-index" : "0",
							"background-color" : "#ffffff"
						});
				$(".menu_bg_layer").css("opacity", "0");
				// 生成背景结束
				$(showID + " li").click(function() {
							$(menuID).val($(this).attr("title"));
							$(inputname).val($(this).attr("id"));
							$(".menu_bg_layer").hide();
							$(showID).hide();
							$(menuID).parent("div").css("position", "");
							$(this).css("background-color", "");
						});

				$(".menu_bg_layer").click(function() {
							$(".menu_bg_layer").hide();
							$(showID).hide();
							$(menuID).parent("div").css("position", "");
						});
				$(showID + " li").hover(function() {
							$(this).css("background-color", "#DAECF5");
						}, function() {
							$(this).css("background-color", "");

						});
			});
		}

	};
	

	// 扩展jquery原型
	$.fn.provincepicker = function(method) {
		if (methods[method]) {
			// 传递作用于为el $("el").monthpicker传递作用于为 $("el"),所有方法定义到这个元素
			return methods[method].apply(this, Array.prototype.slice.call(
							arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return methods.init.apply(methods, arguments);
		} else {
			$.error('Method ' + method
					+ ' does not exist on jQuery.mtz.monthpicker');
		}
	};

})(jQuery);

$.widget("ui.demandTable", {
	options : {
		data : {
			keySearch : [{
						key : '淘宝',
						number : 77.74560837643858,
						percent : 1
					}, {
						key : '淘宝',
						number : 77.74560837643858,
						percent : 0.888728041882193
					}, {
						key : '淘宝',
						number : 14.840078801476722,
						percent : 0.5742003940073837
					}, {
						key : '淘宝',
						number : 12.846709212871465,
						percent : 0.5642335460643573
					}, {
						key : '淘宝',
						number : 11.646697145007332,
						percent : 0.5582334857250366
					}, {
						key : '淘宝',
						number : 1.145727839913078,
						percent : 0.5057286391995653
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.5031630657570794
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.500813791672629
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.5007360485748292
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.5003852033634143
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.500330504438816
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.5002938744904417
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.5002108349411597
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.500080152124227
					}, {
						key : '淘宝',
						number : 1,
						percent : 0.5000609022048365
					}],
			increamentRatio : [{
						key : '淘宝',
						number :1000
					}, {
						key : '淘宝',
						number : 987
					}, {
						key : '淘宝',
						number : 982
					}, {
						key : '淘宝',
						number : 977
					}, {
						key : '淘宝',
						number : 974
					}, {
						key : '淘宝',
						number : 971
					}, {
						key : '淘宝',
						number : 970
					}, {
						key : '淘宝',
						number : 969
					}, {
						key : '淘宝',
						number : 968
					}, {
						key : '淘宝',
						number : 962
					}, {
						key : '淘宝',
						number : 954
					}, {
						key : '淘宝',
						number : 954
					}]

		}
	},
	_create : function() {
		var scope = this;
		if (this.options.data != null) {
			scope.createTemplate(this.options.data);
		} else if (this.options.url != null) {
			$.ajax({
						url : this.options.url,
						type : "GET",
						success : function(mydata) {
							try {
								// mydata = $.parseJSON(mydata);
								mydata = eval(mydata);
							} catch (e) {
							}
							scope.createTemplate(mydata);
						},
						error : function(data) {
							alert(data);
						}
					});

		}

	},
	createTemplate : function(mydata) {

		var tplStr = '<div class="tabConts hotWords" >'
				+ '<div class="tabCont gColor0" style="zoom: 1;">'
				+ '<div style="float: left; width: 50%;">'
				+ '<p style="color: #999; margin-bottom: 5px; padding: 5px 0 10px 0;">相关检索词</p>'
				+ '<table id="leftTable" class="listN1" style="width: 97%;"></table>'
				+ '</div>'
				+ '<div style="float: right; width: 46%;">'
				+ '<p style="color: #999; margin-bottom: 5px; padding: 5px 0 10px 0;">上升最快检索词</p>'
				+ '<table id="rightTable" class="listN1" style="width: 97%;"></table>'
				+ '</div>' + '</div>' + '</div>';
		var tpl = $(tplStr);
		var leftData = mydata.keySearch;
		var leftTable = '<colgroup>' + '<col>' + '<col>' + '<col width="30">'
				+ '<col width="30%">' + '</colgroup>';
		$.each(leftData, function(k, v) {
					leftTable += '<tr>'
							+ '<td class="rank">'
							+ k
							+ '.</td>'
							+ '<td><div class="mhref toe">'
							+ '<a class="hotWord" href="javascript:;">'
							+ v.key
							+ '</a>'
							+ '<a class="icons search" href="javascript:;;"></a>'
							+ '</div></td>' + '<td>热度</td>'
							+ '<td><div class="psBox">'
							+ '<div class="psBar" style="width: ' + v.number
							+ '%; opacity: ' + v.percent + ';"></div>'
							+ '</div></td>' + '</tr>';
				});
		tpl.find("#leftTable").append($(leftTable));
		var rightData = mydata.increamentRatio;
		var rightTable = '<colgroup>' + '<col>' + '<col>' + '<col width="30%">'
				+ '</colgroup>';
		$.each(rightData, function(k, v) {
			rightTable += '<tr>'
					+ '<td class="rank">'
					+ k
					+ '.</td>'
					+ '<td><div class="mhref toe">'
					+ '<a class="hotWord" href="javascript:;">'
					+ v.key
					+ '</a> '
					+ '<a class="icons search" href="javascript:;;"></a>'
					+ '</div></td>'
					+ '<td class="txr"><span class="ratUp">'+v.number+'</span></td>'
					+ '</tr>';
		});
		tpl.find("#rightTable").append($(rightTable));
		this.element.html(tpl);

		this._update(mydata);

	},

	_setOption : function(key, value) {
		this.options[key] = value;

	},

	_update : function(data) {
		this._initEvents();
	},

	_initEvents : function(element) {

	},

	_destroy : function() {
		this.element.text("");
		$.Widget.prototype.destroy.call(this);

	}

});

/**
 * 
 * messagebox plugins
 * @author songquanwang
 * 
 */

$(function() {
	window.Modal = function() {
		var reg = new RegExp("\\[([^\\[\\]]*?)\\]", 'igm');
		// 定义模板
	    var tplStr='<div id="ycf-alert" class="modal">'+
			      '<div class="modal-dialog modal-sm">'+
			        '<div class="modal-content">'+
			          '<div class="modal-header">'+
			            '<button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>'+
			            '<h5 class="modal-title"><i class="fa fa-exclamation-circle"></i> [Title]</h5>'+
			          '</div>'+
			          '<div class="modal-body small">'+
			            '<p>[Message]</p>'+
			          '</div>'+
			          '<div class="modal-footer" >'+
			            '<button type="button" class="btn btn-primary ok" data-dismiss="modal">[BtnOk]</button>'+
			            '<button type="button" class="btn btn-default cancel" data-dismiss="modal">[BtnCancel]</button>'+
			          '</div>'+
			        '</div>'+
			      '</div>'+
			    '</div>';
		var alr = $("#ycf-alert");
		if (alr.length == 0) {
			alr = $(tplStr);
			$(document.body).append(alr);
		}
		var ahtml = alr.html();

		var _alert = function(title, msg, callback) {
			alr.html(ahtml); // 复原
			alr.find('.ok').removeClass('btn-success').addClass('btn-primary');
			alr.find('.cancel').hide();
			_dialog({
						msg : msg,
						title : title
					});

			if (callback && callback instanceof Function) {
				alr.find('.ok').click(function() {
							callback(true)
						});
			}
		};

		var _confirm = function(title, msg, callback) {
			alr.html(ahtml); // 复原
			alr.find('.ok').removeClass('btn-primary').addClass('btn-success');
			alr.find('.cancel').show();
			_dialog({
						msg : msg,
						title : title
					});

			if (callback && callback instanceof Function) {
				alr.find('.ok').click(function() {
							callback(true)
						});
				alr.find('.cancel').click(function() {
							callback(false)
						});
			}
		};

		var _dialog = function(options) {
			var ops = {
				msg : "提示内容",
				title : "操作提示",
				btnok : "确定",
				btncl : "取消"
			};

			$.extend(ops, options);

			console.log(alr);

			var html = alr.html().replace(reg, function(node, key) {
						return {
							Title : ops.title,
							Message : ops.msg,
							BtnOk : ops.btnok,
							BtnCancel : ops.btncl
						}[key];
					});

			alr.html(html);
			alr.modal({
						width : 500,
						backdrop : 'static'
					});
		}

		var m = {
			alert : _alert,
			confirm : _confirm,
			sAlert : function(message) {
				_alert({
							msg : message,
							title : '提示',
							btnok : '确定',
							btncl : '取消'
						});
			}
		};
		jQuery.extend(m);

	}();
});
